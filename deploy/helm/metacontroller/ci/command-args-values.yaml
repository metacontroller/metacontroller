rbac:
  create: true

image:
  repository: metacontrollerio/metacontroller
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
namespaceOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

# Command which is used to start metacontroller
command: "/usr/bin/metacontroller"

# Command arguments which are used to start metacontroller
commandArgs:
  - --zap-log-level=4
  - --zap-devel=false
  - --zap-encoder=json
  - --zap-stacktrace-level=error
  - --discovery-interval=1m
  - --cache-flush-interval=10m
  - --metrics-address=:9999
  - --client-go-qps=150
  - --client-go-burst=300
  - --workers=50
  - --events-qps=0.0033
  - --events-burst=25
  - --pprof-address=:6060

# The name of the PriorityClass that will be assigned to metacontroller
priorityClassName: ""

clusterRole:
  aggregationRule: {}
  rules:
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - "*"

replicas: 1

# podDisruptionBudget which can be enabled when running more than one replica
podDisruptionBudget: {}
  # minAvailable: 1
  # maxUnavailable: 0
