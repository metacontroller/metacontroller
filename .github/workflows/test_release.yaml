---
name: Test / Release
on: [ push, pull_request ]
jobs:
  dockerbuild:
    name: Build local metacontroller images
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        target:
          - { name: 'dev', command: "image" }
          - { name: 'debug', command: 'image_debug' }
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: '5'
      - uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          install-only: true
      - name: build image
        run: |
          make ${{ matrix.target.command }}
      - name: Build metacontroller:${{ matrix.target.name }}
        run: |
          docker save --output metacontroller-${{ matrix.target.name }}.tar metacontrollerio/metacontroller:${{ matrix.target.name }}
      - uses: actions/upload-artifact@v3
        name: Upload metacontroller images
        with:
          name: metacontroller-image
          path: metacontroller-*.tar
          retention-days: 1
  setmatrix:
    name: Set Configuration Matrix
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      latest_matrix: ${{ steps.set-matrix.outputs.latest_matrix }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: '5'
      - id: set-matrix
        name: setconfigmatrix
        # assume that kind-matrix-config.json is in ascending order and the latest version is the last element
        run: |
          full_json=$(cat ./.github/config/kind-matrix-config.json | jq -rc .)
          latest_json=$(cat ./.github/config/kind-matrix-config.json  | jq -rc '.configuration |= [last]')
          echo "::set-output name=matrix::${full_json}"
          echo "::set-output name=latest_matrix::${latest_json}"
  tests:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        target: [ "unit-test", "integration-test" ]
    name: Tests
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: '5'
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
      - name: Prepare integration test environment
        shell: bash
        if: (${{ matrix.target }}=='integration-test')
        run: test/integration/hack/get-kube-binaries.sh
      - name: Run ${{ matrix.target }}
        shell: bash
        run: make ${{ matrix.target }}
      - name: coverage-unit
        if: (github.repository_owner == 'metacontroller')
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: test/integration/hack/tmp/${{ matrix.target }}-coverage.out
          flags: ${{ matrix.target }}
          fail_ci_if_error: true # optional (default = false)
  e2etests:
    env:
      CI_MODE: true
    needs:
      - setmatrix
      - dockerbuild
    runs-on: ${{ matrix.configuration.runner }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setmatrix.outputs.matrix)}}
    name: e2e test k8s ${{ matrix.configuration.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: '5'
      - name: Setup kind
        uses: helm/kind-action@v1.5.0
        with:
          version: ${{ matrix.configuration.kind }}
          node_image: ${{ matrix.configuration.image }}
          cluster_name: kind
          wait: 120s

      - name: Download metacontroller images
        uses: actions/download-artifact@v3
        with:
          name: metacontroller-image

      - name: Load metacontroller images
        run: |
          docker load --input metacontroller-dev.tar
          kind load docker-image metacontrollerio/metacontroller:dev

      - name: Apply metacontroller manifests
        run: |
          kubectl apply -k manifests/dev
          kubectl rollout status --watch --timeout=180s statefulset/metacontroller -n metacontroller || kubectl describe pod metacontroller-0 -n metacontroller
          kubectl get pods -n metacontroller

      - name: Run e2e tests
        timeout-minutes: 30
        run: |
          cd examples
          ./test.sh
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: |
            /tmp/metacontroller????/**
          retention-days: 5
      - name: Cleanup
        run: |
          rm -rf /tmp/metacontroller????

  helmtests:
    runs-on: ubuntu-22.04
    needs:
      - setmatrix
      - dockerbuild
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setmatrix.outputs.latest_matrix)}}
    name: helm test k8s ${{ matrix.configuration.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.8.1

      - uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.4.0

      - name: Setup kind
        uses: helm/kind-action@v1.5.0
        with:
          version: ${{ matrix.configuration.kind }}
          node_image: ${{ matrix.configuration.image }}
          cluster_name: kind
          wait: 120s

      - name: Download metacontroller images
        uses: actions/download-artifact@v3
        with:
          name: metacontroller-image

      - name: Load metacontroller images
        run: |
          docker load --input metacontroller-dev.tar
          kind load docker-image metacontrollerio/metacontroller:dev
          docker load --input metacontroller-debug.tar
          kind load docker-image metacontrollerio/metacontroller:debug

      - name: Copy default values.yaml to ci directory with dev image
        run: |
          sed 's/tag: ""/tag: "dev"/g' deploy/helm/metacontroller/values.yaml > deploy/helm/metacontroller/ci/default-values.yaml

      - name: Run chart-testing (lint-and-install)
        run: |
          ct lint-and-install --chart-dirs deploy/helm \
          --chart-yaml-schema '.github/config/chart-testing/etc/chart_schema.yaml' \
          --lint-conf '.github/config/chart-testing/etc/lintconf.yaml' \
          --validate-maintainers=false \
          --check-version-increment=false \
          --target-branch ${{ github.event.repository.default_branch }}

  release:
    if: (github.ref == 'refs/heads/master') && (github.repository_owner == 'metacontroller')
    name: Release - Create tag
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    concurrency:
      group: ${{ github.ref }}
    runs-on: ubuntu-22.04
    needs: [ 'tests', 'e2etests', 'helmtests' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm install ci
      - uses: rlespinasse/github-slug-action@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to github registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          install-only: true
      - name: Release
        env:
          GH_TOKEN: ${{ secrets.PAT }}
          GITHUB_TOKEN: ${{ secrets.PAT }}
          REPOSITORY_OWNER: ${{github.repository_owner}}
        run: |
          npm install @semantic-release/git @semantic-release/changelog @google/semantic-release-replace-plugin @semantic-release/exec -D
          npx semantic-release
