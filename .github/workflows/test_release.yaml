---
name: Test / Release
on: [push, pull_request]
jobs:
  setmatrix:
    name: Set Configuration Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      v1_matrix: ${{ steps.set-matrix.outputs.v1_matrix }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: '5'
      - id: set-matrix
        name: setconfigmatrix
        run: |
          full_json=$(cat ./.github/config/kind-matrix-config.json | jq -rc .)
          v1_json=$(cat ./.github/config/kind-matrix-config.json  | jq -rc '.configuration |=  map(select(.crd_version == "v1"))')
          echo "::set-output name=matrix::${full_json}"
          echo "::set-output name=v1_matrix::${v1_json}"
  tests:
    runs-on: ubuntu-20.04
    name: Tests
    steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: '5'
    - name: Run unit & integration tests
      shell: bash
      run: DOCKER_BUILDKIT=1 docker build -o ./tmp -t metacontroller:test -f Dockerfile.test .
    - name: coverage-unit
      if: (github.repository_owner == 'metacontroller')
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
        files: ./tmp/unit-coverage.out
        flags: unit
        fail_ci_if_error: true # optional (default = false)
    - name: coverage-integration
      if: (github.repository_owner == 'metacontroller')
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
        files: ./tmp/integration-coverage.out
        flags: integration
        fail_ci_if_error: true # optional (default = false)
  e2etests:
    runs-on: ubuntu-20.04
    needs: ['setmatrix']
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setmatrix.outputs.matrix)}}
    name: e2e test k8s ${{ matrix.configuration.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: '5'

    - name: Build local image
      run: docker build -t metacontrollerio/metacontroller:dev .

    - name: Setup kind
      uses: helm/kind-action@v1.2.0
      with:
        version: ${{ matrix.configuration.kind }}
        node_image: ${{ matrix.configuration.image }}
        cluster_name: kind
        wait: 120s

    - name: Load metacontroller image
      run: |
        kind load docker-image metacontrollerio/metacontroller:dev

    - name: Replace CRD manifests to v1beta1
      if: ${{ matrix.configuration.crd_version == 'v1beta1' }}
      run: |
        sed -i 's/crds-v1/crds-v1beta1/' manifests/production/kustomization.yaml
        for file in examples/**/*.yaml; do sed -i 's/apiextensions.k8s.io\/v1/apiextensions.k8s.io\/v1beta1/g' $file; done

    - name: Apply metacontroller manifests
      run: |
        kubectl apply -k manifests/dev
        sleep 60s
        kubectl get pods -n metacontroller

    - name: Run e2e tests
      timeout-minutes: 30
      run: |
        cd examples
        ./test.sh --crd_version ${{ matrix.configuration.crd_version }}

  helmtests:
    runs-on: ubuntu-20.04
    needs: ['setmatrix']
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setmatrix.outputs.v1_matrix)}}
    name: helm test k8s ${{ matrix.configuration.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.8.1

      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.2.1

      - name: Setup kind
        uses: helm/kind-action@v1.2.0
        with:
          version: ${{ matrix.configuration.kind }}
          node_image: ${{ matrix.configuration.image }}
          cluster_name: kind
          wait: 120s

      - name: Run chart-testing (lint)
        run: |
          ct lint --chart-dirs deploy/helm \
          --chart-yaml-schema '.github/config/chart-testing/etc/chart_schema.yaml' \
          --lint-conf '.github/config/chart-testing/etc/lintconf.yaml' \
          --validate-maintainers=false \
          --check-version-increment=false \
          --target-branch ${{ github.event.repository.default_branch }}

      - name: Run chart-testing (install)
        run: |
          ct install --chart-dirs deploy/helm \
          --target-branch ${{ github.event.repository.default_branch }}

  release:
    if: (github.ref == 'refs/heads/master') && (github.repository_owner == 'metacontroller')
    name: Release - Create tag
    runs-on: ubuntu-20.04
    needs: ['tests', 'e2etests', 'helmtests']
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'
    - name: Install dependencies
      run: npm install ci
    - name: Release
      env:
        GH_TOKEN: ${{ secrets.PAT }}
      run: |
        npm install @semantic-release/git @semantic-release/changelog @google/semantic-release-replace-plugin -D
        npx semantic-release
